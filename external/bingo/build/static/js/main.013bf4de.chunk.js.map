{"version":3,"sources":["components/header.jsx","components/board.jsx","components/instructions.jsx","components/leaderboard.jsx","components/welcomeScreen.jsx","firebase.js","components/app.jsx","serviceWorker.js","index.js"],"names":["Header","Component","renderSuccess","this","props","gotBingo","className","style","textAlign","alt","width","src","render","children","momentDurationFormatSetup","moment","Board","constructor","super","size","cellCount","midpoint","values","slice","i","length","push","state","activeCell","activeRow","activeCol","endTime","grid","generateRandomGrid","selection","startTime","Date","now","handleKeyDown","bind","refreshBoard","updateLeaderBoard","randomizedValues","array","j","Math","floor","random","shuffleArray","row","col","id","value","name","document","getElementById","data","timestamp","duration","key","db","database","ref","gameId","child","setState","leaderboardSubmitted","bingo","componentDidUpdate","prevProps","prevState","focus","console","clear","log","checkRow","checkCol","checkDiagonalA","checkDiagonalB","checkIndices","indices","index","rowStart","event","setActiveCell","preventDefault","renderMidpointCell","cellId","role","aria-disabled","aria-pressed","onClick","onKeyDown","tabIndex","aria-labelledby","xmlns","viewBox","d","renderCell","cell","isMidpoint","selected","obj","Object","assign","renderRow","y","map","x","renderLeaderboardPrompt","htmlFor","placeholder","aria-live","aria-label","format","fontSize","parent","prefix","blacklist","defaultProps","split","Instructions","renderDefault","href","fontStyle","bottom","display","justifyContent","alignItems","source","LeaderBoard","renderEmptyState","leaders","aria-atomic","leader","aria-hidden","WelcomeScreen","handleSubmit","e","boardName","window","location","search","onSubmit","type","config","apiKey","process","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","databaseURL","projectId","storageBucket","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","firebase","initializeApp","App","queryString","parse","game","noSuchGame","signedIn","once","then","exists","lexicon","val","instructions","replace","orderByChild","on","leaderboard","sort","a","b","renderGame","renderLoadingScreen","renderWelcomeScreen","AppRouter","Route","path","exact","component","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.013bf4de.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n  renderSuccess() {\n    if (this.props.gotBingo) {\n      return (\n        <span className=\"ma2 f1-ns f2-m f3\" style={{textAlign: \"center\",}}>\n          <img alt=\"nf-core/bingo logo\" width=\"50%\" src=\"assets/img/nfcore-bingo_logo.png\"></img>You got bingo! 🎉\n        </span>\n      );\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <header className=\"flex justify-between items-end bb-5 pv-1\">\n        <h1 className={this.props.gotBingo ? \"visually-hidden\" : \"ma2 f1-ns f2-m f3\"}>\n        <img alt=\"nf-core/bingo logo\" width=\"50%\" src=\"assets/img/nfcore-bingo_logo.png\"></img>\n        </h1>\n        {this.renderSuccess()}\n        {this.props.children}\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport momentDurationFormatSetup from 'moment-duration-format';\nimport SimpleStorage from 'react-simple-storage';\nimport Header from './header';\n\nmomentDurationFormatSetup(moment);\n\nfunction copyObject(obj) {\n  return Object.assign({}, obj);\n}\n\n/* https://stackoverflow.com/a/12646864 */\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n\n  return array;\n}\n\nclass Board extends Component {\n\n  constructor(props) {\n    super(props);\n\n    const size = props.size % 2 ? props.size : props.size - 1;\n    const cellCount = size * size;\n    const midpoint = (size * size - 1)/ 2;\n\n    // Ensure we have enough values to fill this size board.\n    // If not, keep adding duplicate values until we do.\n    let values = props.values.slice();\n    let i = 0;\n    while (values.length < cellCount) {\n      values.push(props.values[i]);\n      i++;\n      if (i > props.values.length - 1) i = 0;\n    }\n\n    this.state = {\n      activeCell: 0,\n      activeRow: 0,\n      activeCol: 0,\n      endTime: 0,\n      grid: this.generateRandomGrid(values, size),\n      midpoint: midpoint,\n      selection: {[midpoint]: true},\n      size: size,\n      startTime: Date.now(),\n      values: values,\n    };\n\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.refreshBoard = this.refreshBoard.bind(this);\n    this.updateLeaderBoard = this.updateLeaderBoard.bind(this);\n  }\n\n  /**\n   * Randomize supplied values and return \n   * a grid with dimensions size * size\n   */\n  generateRandomGrid(values, size) {\n    const randomizedValues = shuffleArray(values);\n\n    let grid = [];\n    for (let row = 0; row < size; row++) {\n      grid[row] = [];\n      for (let col = 0; col < size; col++) {\n        let id = col + (row * size);\n        grid[row][col] = {\n          value: randomizedValues[id],\n          id: id\n        }\n      }\n    }\n\n    return grid;\n  }\n\n  updateLeaderBoard() {\n    const name = document.getElementById('name').value;\n    if (name && name !== '') {\n      const data = {\n        name: name,\n        timestamp: this.state.endTime,\n        duration: this.state.endTime - this.state.startTime\n      };\n      const key = this.props.db.database().ref('games/' + this.props.gameId).child('leaderboard').push(data).key;\n      this.setState({leaderboardSubmitted: true});\n      return key;\n    }\n  }\n\n  /**\n   * Randomize cell values, reset timer, and clear selection.\n   */\n  refreshBoard() {\n    this.setState({\n      activeCell: 0,\n      activeRow: 0,\n      activeCol: 0,\n      bingo: false,\n      grid: this.generateRandomGrid(this.state.values, this.state.size),\n      leaderboardSubmitted: false,\n      selection: {[this.state.midpoint]: true},\n      startTime: Date.now(),\n      endTime: 0\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // not a new board\n    if (prevState.startTime === this.state.startTime) {\n      // focus active cell\n      if (prevState.activeCell !== this.state.activeCell) {\n        document.getElementById(this.props.id + '-cell-' + this.state.activeCell).focus();\n      }\n\n      // if selection has changed in some way, check for bingo\n      if (prevState.selection !== this.state.selection) {\n        console.clear();\n        console.log('Checking for bingo...');\n        if (\n          this.checkRow(this.state.activeRow) ||\n          this.checkCol(this.state.activeCol) ||\n          this.checkDiagonalA(this.state.activeRow, this.state.activeCol) ||\n          this.checkDiagonalB(this.state.activeRow, this.state.activeCol)\n        ) {\n          if (!this.state.bingo) {\n            console.log('It\\'s a bingo!');\n            this.setState({\n              bingo: true,\n              endTime: Date.now(),\n            });\n          }\n        } else {\n          console.log('Alas, not a bingo.')\n          this.setState({bingo: false});\n        }\n      }\n    }\n  }\n\n  checkIndices(indices) {\n    for (let i = 0; i < indices.length; i++) {\n      let index = indices[i];\n      if (!this.state.selection[index]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  checkRow(row) {\n    const size = this.state.size;\n    const rowStart = row * size;\n    for (let i = rowStart; i < rowStart + size; i++) {\n      if (!this.state.selection[i]) {\n        console.log('- Bingo in row ' + row + '? Fail at cell ' + i);\n        return false;\n      }\n    }\n    console.log('- Bingo in row ' + row + '? Success!');\n    return true;\n  }\n\n  checkCol(col) {\n    const size = this.state.size;\n    for (let j = col; j < size * size; j+= size) {\n      if (!this.state.selection[j]) {\n        console.log('- Bingo in col ' + col + '? Fail at cell ' + j);\n        return false;\n      }\n    }\n    console.log('- Bingo in col ' + col + '? Success!');\n    return true;\n  }\n\n  /* Upper left to lower right */\n  checkDiagonalA(row, col) {\n    const size = this.state.size;\n    if (row === col) {\n      for (let i = 0; i < size; i++) {\n        if (!this.state.selection[size * i + i]) {\n          console.log('- Bingo in diagonal A? Fail at cell ' + (size * i + i));\n          return false;\n        }\n      }\n      console.log('- Bingo in diagonal A? Success!');\n      return true;\n    }\n  }\n\n  /* Upper right to lower left */\n  checkDiagonalB(row, col) {\n    const size = this.state.size;\n    if (row === (size - col - 1)) {\n      for (let i = 0; i < size; i++) {\n        if (!this.state.selection[size * i + size - i - 1]) {\n          console.log('- Bingo in diagonal B? Fail at cell ' + (size * i + size - i - 1));\n          return false;\n        }\n      }\n      console.log('- Bingo in diagonal B? Success!')\n      return true;\n    }\n  }\n\n  handleKeyDown(event, row, col) {\n    switch (event.key) {\n      case 'Down':\n      case 'ArrowDown':\n        if (row < this.state.size - 1) this.setActiveCell(row + 1, col);\n        event.preventDefault();\n        break;\n      case 'Up':\n      case 'ArrowUp':\n        if (row > 0) this.setActiveCell(row - 1, col);\n        event.preventDefault();\n        break;\n      case 'Left':\n      case 'ArrowLeft':\n        if (col > 0) this.setActiveCell(row, col - 1);\n        event.preventDefault();\n        break;\n      case 'Right':\n      case 'ArrowRight':\n        if (col < this.state.size - 1) this.setActiveCell(row, col + 1);\n        event.preventDefault();\n        break;\n      default:\n        break;\n    }\n  }\n\n  setActiveCell(row, col) {\n    this.setState({activeCell: this.state.grid[row][col].id});\n  }\n\n  renderMidpointCell(cellId, row, col) {\n    return (\n      <td role='gridcell' key={cellId}>\n        <div className='cell-contents'>\n          <button\n            aria-disabled={true}\n            aria-pressed={true}\n            className='cell-toggle'\n            id={this.props.id + '-cell-' + cellId}\n            onClick={() => {this.setState({activeCell : cellId});}}\n            onKeyDown={(event) => {this.handleKeyDown(event, row, col);}}\n            tabIndex={cellId === this.state.activeCell ? '0' : '-1'}\n          >\n            <svg role=\"img\" aria-labelledby=\"star-title\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n              <title id=\"star-title\">Star (free tile)</title>\n              <path d=\"M12.6 1.4l2.2 7c.1.2.3.4.6.4h6.9c.7 0 1 .9.5 1.3l-5.7 4.2c-.2.1-.3.5-.2.7l2.7 7.2c.2.6-.5 1.2-1.1.7l-6-4.5c-.3-.2-.6-.2-.9 0l-6.1 4.5c-.5.5-1.3-.1-1-.7L7.1 15c.1-.2 0-.6-.3-.7l-5.6-4.2c-.6-.4-.2-1.3.4-1.3h6.9c.4 0 .6-.1.7-.4l2.2-7c.1-.7 1.1-.6 1.2 0z\"></path>\n            </svg>\n          </button>\n        </div>\n      </td>\n    );\n  }\n\n  renderCell(cell, row, col) {\n    const isMidpoint = cell.id === this.state.midpoint;\n    const selected = this.state.selection[cell.id] || isMidpoint ? true : false;\n\n    if (isMidpoint) { return this.renderMidpointCell(cell.id, row, col); }\n\n    return (\n      <td role='gridcell' key={cell.id}>\n        <div className='cell-contents'>\n          <button\n            aria-pressed={selected}\n            className='cell-toggle'\n            id={this.props.id + '-cell-' + cell.id}\n            onClick={() => {\n              let selection = copyObject(this.state.selection);\n              selection[cell.id] = !selected;\n\n              this.setState({\n                selection: selection,\n                activeCell: cell.id,\n                activeRow: row,\n                activeCol: col\n              });\n            }}\n            onKeyDown={(event) => {this.handleKeyDown(event, row, col);}}\n            tabIndex={cell.id === this.state.activeCell ? '0' : '-1'}\n          >\n            {/*cell.id*/}\n            {cell.value} \n          </button>\n        </div>\n      </td>\n    );\n  }\n\n  renderRow(row, y) {\n    return (\n      <tr role='row' key={y}>\n        {row.map((cell, x) => { return this.renderCell(cell, y, x); })}\n      </tr>\n    );\n  }\n\n  renderLeaderboardPrompt() {\n    if (this.state.bingo) {\n      if (this.state.leaderboardSubmitted) {\n        return (\n          <p className='lh-copy mb0'>\n            You're on the leaderboard!{' '}\n            Keep playing on this bingo board or{' '}\n            <button onClick={this.refreshBoard}>generate a new one</button>.\n          </p>\n        );\n      } else {\n        return (\n          <div className='pt3'>\n            <label htmlFor='name'>Enter a name to display on the leaderboard:</label>\n            <div className='pv2'>\n              <input\n                style={{'backgroundColor': '#f6f7fa'}}\n                className='input-reset pa3 mb2 ba bw1 b--black'\n                id='name'\n                placeholder='Your Name' />\n              <button\n                className='tc fw8 blue-button white pa3 ml2 ba bw1 b--black'\n                onClick={this.updateLeaderBoard}\n              >\n                Add me!\n              </button>\n            </div>\n          </div>\n        );\n      }\n    }\n    return null;\n  }\n\n  renderSuccess() {\n    if (this.state.bingo) {\n      return (\n        <div className='success maxw-95 pa3 mv3'>\n          <div className='flex flex-wrap items-center justify-between'>\n            <div className='w-50-l w-100 tc tl-l' role='alert' aria-live='assertive'>\n              <span className='f2 fw8'>You got bingo! <span role=\"img\" aria-label=\"Hurray!\">🎉</span></span>\n              <div className='f3 pt2'>\n                Total time: {moment.duration(this.state.endTime - this.state.startTime).format('h [hr], m [min], s [sec]')}\n              </div>\n            </div>\n            <div className='w-50-l w-100 tc tr-l'>\n              {this.renderLeaderboardPrompt()}\n            </div>\n          </div>\n        </div>\n      )\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <div>\n        <Header gotBingo={this.state.bingo}>\n          <button\n            className='tc fw8 bg-white black pa3 ba bw1 b--black mb2'\n            onClick={this.refreshBoard}\n          >\n            New Board\n          </button>\n        </Header>\n        <main>\n          <p style={{fontSize: \"12px\"}}>🛈 See leaderboard and Instructions below the board.</p>\n          <table role='grid' className='maxw-95'>\n            <tbody role='rowgroup'>\n              {this.state.grid.map((row, y) => { return (this.renderRow(row, y))})}\n            </tbody>\n          </table>\n          {this.renderSuccess()}\n        </main>\n        { /* Stores current board state in local storage so\n             game is preserved even when refreshed */ }\n        <SimpleStorage\n          parent={this}\n          prefix={`bingo-${this.props.gameId}`}\n          blacklist={['activeCell', 'activeRow', 'activeCol', 'values']}\n        />\n      </div>\n    );\n  }\n}\n\nBoard.propTypes = {\n  size: PropTypes.number,\n  values: PropTypes.array\n}\n\nBoard.defaultProps = {\n  size: 5,\n  values: 'abcdefghijklmnopqrstuv'.split('')\n}\n\nexport default Board;\n","import React, { Component } from 'react';\nimport ReactMarkdown from 'react-markdown';\n\nclass Instructions extends Component {\n\n  renderDefault() {\n    return (\n      <div>\n        <h3>The Basics</h3>\n        <ul>\n        <li>Type in the board name as: nf-core-hackathon</li>\n          <li>Press tiles as phrases come up.</li>\n          <li>Your game timer begins as soon as you start a new board.</li>\n          <li>🎉 <strong>5 in a row is bingo!</strong></li>\n          <li>Shout 'BINGO!' on Slack, and/or announce on Twitter tagging @nf_core, with a screenshot!</li>\n          <li>Your board will persist over browser sessions, press 'New Board' to restart.</li>\n        </ul>\n        <blockquote>🛈 Get more information about nf-core on our <a href=\"https://nf-co.re\">website!</a></blockquote>\n        <footer><p style={{fontSize:10, width: \"100%\", fontStyle: 'italic', bottom:0, display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>This page was modified after <a href=\"https://backlog-bingo.com/\">Backlog-Bingo</a>.  <a href=\"https://github.com/corhttps://github.com/cordeliadillon/bingo/deliadillon/bingo/\">Code</a> originally written by <a href=\"https://www.cordeliadillon.com/\">Cordelia Dillon</a></p></footer>\n      </div>\n\n    );\n  }\n\n  render() {\n    return (\n      <aside className='maxw-95 instructions' aria-label=\"Instructions\">\n        <h2 className=\"pv2 bb-3\">Instructions</h2>\n        {this.props.src ? <ReactMarkdown source={this.props.src}/> : this.renderDefault()}\n      </aside>\n    );\n  }\n\n}\n\nexport default Instructions;\n","import React, { Component } from 'react';\nimport moment from 'moment';\nimport momentDurationFormatSetup from 'moment-duration-format';\n\nmomentDurationFormatSetup(moment);\n\nclass LeaderBoard extends Component {\n\n  renderEmptyState() {\n    if (!this.props.leaders || !this.props.leaders.length) {\n      return (\n        <div>\n          <p>There's no one on the leaderboard yet!</p>\n          <p>Get {this.props.size} phrases in a row to add yourself to the list with: &lt;name surname&gt; (@&lt;github handle&gt;).</p>\n        </div>\n      );\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <aside className='maxw-95' aria-label=\"Leaderboard\">\n        <h2 className=\"bb-3 pv2\">Leaderboard</h2>\n        <div role='log' aria-live='polite' aria-atomic='true'>\n          <ol className=\"f4 list pa0\">\n            {this.props.leaders.map((leader, i) => {\n              return (\n                <li key={i} className='ph1 pb3'>\n                  <span aria-hidden=\"true\">🏆 </span> \n                  <strong>\n                    {leader.name}\n                    {' '}&middot;{' '}\n                    {moment.duration(leader.duration).format('h [hr], m [min], s [sec]')}\n                    {' '}&middot;{' '}\n                  </strong>\n                  {moment(leader.timestamp).format('L LT')}\n                </li>\n              );\n            })}\n          </ol>\n          {this.renderEmptyState()}\n        </div>\n      </aside>\n    );\n  }\n\n}\n\nexport default LeaderBoard;","import React, { Component } from 'react';\nimport 'firebase/auth';\n\nclass WelcomeScreen extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(e) {\n    const boardName = document.getElementById('boardName').value;\n    if (boardName) window.location.search = `game=${boardName}`;\n    e.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <h2>Ready to join a game?</h2>\n        <div>\n          <label htmlFor='boardName' className='f6 b db mb2'>Board Name</label>\n          <input\n            style={{'backgroundColor': '#f6f7fa'}}\n            className='input-reset pa3 mr2 ba bw1 b--black'\n            id='boardName'\n            placeholder='Enter your board name' />\n          <input\n            className='tc fw8 blue-button white pa3 ba bw1 b--black'\n            value='Play!'\n            type='submit'\n          />\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default WelcomeScreen;\n","import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst config = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID\n};\n\nfirebase.initializeApp(config);\nexport default firebase;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Board from './board';\nimport Instructions from './instructions';\nimport LeaderBoard from './leaderboard';\nimport WelcomeScreen from './welcomeScreen';\nimport Header from './header';\nimport firebase from '../firebase.js';\nimport queryString from 'query-string';\nimport './app.css';\nimport '../tachyons.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      gameId: queryString.parse(props.location.search).game,\n      noSuchGame: false,\n      signedIn: false,\n    };\n\n    firebase.database().ref('games/' + this.state.gameId).once('value').then((game) => {\n      this.setState({\n        noSuchGame: !game.exists(),\n        lexicon: game.child('lexicon').val(),\n        size: game.child('size').val()\n      });\n      let instructions = game.child('instructions').val();\n      if (instructions) {\n        this.setState({\n          instructions: instructions.replace(/\\\\n/g, '\\n')\n        });\n      }\n    });\n\n    firebase.database().ref('games/' + this.state.gameId + '/leaderboard').orderByChild('duration').on('value', (leaderboard) => {\n      const values = leaderboard.val();\n      const leaders = \n        values ?\n          Object.values(leaderboard.val()).sort((a, b) => {\n            return a.duration - b.duration;\n          }) : [];\n      this.setState({leaders: leaders});\n    });\n  }\n\n  renderGame() {\n    return (\n      <div>\n        <Board id='abc' size={this.state.size} values={this.state.lexicon} db={firebase} gameId={this.state.gameId} />\n        <LeaderBoard leaders={this.state.leaders} size={this.state.size} />\n        <Instructions src={this.state.instructions}/>\n      </div>\n    );\n  }\n\n  renderLoadingScreen() {\n    return (\n      <div>\n        <Header/>\n        <main>\n          <div className=\"f3 pa2\" aria-live='polite'>Loading...</div>\n        </main>\n      </div>\n    );\n  }\n\n  renderWelcomeScreen() {\n    return (\n      <div>\n        <Header/>\n        <main>\n          <WelcomeScreen firebase={firebase} />\n        </main>\n        <Instructions/>\n      </div>\n    );\n  }\n\n  render() {\n    if (this.state.gameId) {\n      if (!this.state.noSuchGame) {\n        if (this.state.lexicon && this.state.size) {\n          return this.renderGame();\n        } else {\n          return this.renderLoadingScreen();\n        }\n      } \n    }\n    return this.renderWelcomeScreen();\n  }\n}\n\nconst AppRouter = () => (\n  <Router>\n    <Route path=\"/\" exact component={App} />\n  </Router>\n);\n\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}