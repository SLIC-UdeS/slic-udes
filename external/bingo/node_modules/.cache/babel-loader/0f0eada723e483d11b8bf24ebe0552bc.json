{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nvar el;\nmodule.exports = decodeEntity;\n\nfunction decodeEntity(characters) {\n  var entity = '&' + characters + ';';\n  var char;\n  el = el || document.createElement('i');\n  el.innerHTML = entity;\n  char = el.textContent; // Some entities do not require the closing semicolon (&not - for instance),\n  // which leads to situations where parsing the assumed entity of &notit; will\n  // result in the string `¬it;`.  When we encounter a trailing semicolon after\n  // parsing and the entity to decode was not a semicolon (&semi;), we can\n  // assume that the matching was incomplete\n\n  if (char.slice(-1) === ';' && characters !== 'semi') {\n    return false;\n  } // If the decoded string is equal to the input, the entity was not valid\n\n\n  return char === entity ? false : char;\n}","map":{"version":3,"sources":["/home/jfellows/Documents/git/jfy133/nf-co.re/external/bingo/node_modules/parse-entities/decode-entity.browser.js"],"names":["el","module","exports","decodeEntity","characters","entity","char","document","createElement","innerHTML","textContent","slice"],"mappings":"AAAA;AAEA;;AAEA,IAAIA,EAAJ;AAEAC,MAAM,CAACC,OAAP,GAAiBC,YAAjB;;AAEA,SAASA,YAAT,CAAsBC,UAAtB,EAAkC;AAChC,MAAIC,MAAM,GAAG,MAAMD,UAAN,GAAmB,GAAhC;AACA,MAAIE,IAAJ;AAEAN,EAAAA,EAAE,GAAGA,EAAE,IAAIO,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAX;AACAR,EAAAA,EAAE,CAACS,SAAH,GAAeJ,MAAf;AACAC,EAAAA,IAAI,GAAGN,EAAE,CAACU,WAAV,CANgC,CAQhC;AACA;AACA;AACA;AACA;;AACA,MAAIJ,IAAI,CAACK,KAAL,CAAW,CAAC,CAAZ,MAAmB,GAAnB,IAA0BP,UAAU,KAAK,MAA7C,EAAqD;AACnD,WAAO,KAAP;AACD,GAf+B,CAiBhC;;;AACA,SAAOE,IAAI,KAAKD,MAAT,GAAkB,KAAlB,GAA0BC,IAAjC;AACD","sourcesContent":["'use strict'\n\n/* eslint-env browser */\n\nvar el\n\nmodule.exports = decodeEntity\n\nfunction decodeEntity(characters) {\n  var entity = '&' + characters + ';'\n  var char\n\n  el = el || document.createElement('i')\n  el.innerHTML = entity\n  char = el.textContent\n\n  // Some entities do not require the closing semicolon (&not - for instance),\n  // which leads to situations where parsing the assumed entity of &notit; will\n  // result in the string `¬it;`.  When we encounter a trailing semicolon after\n  // parsing and the entity to decode was not a semicolon (&semi;), we can\n  // assume that the matching was incomplete\n  if (char.slice(-1) === ';' && characters !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the entity was not valid\n  return char === entity ? false : char\n}\n"]},"metadata":{},"sourceType":"script"}