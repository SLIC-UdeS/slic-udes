{"ast":null,"code":"'use strict';\n\nmodule.exports = visitParents;\n\nvar is = require('unist-util-is');\n\nvar CONTINUE = true;\nvar SKIP = 'skip';\nvar EXIT = false;\nvisitParents.CONTINUE = CONTINUE;\nvisitParents.SKIP = SKIP;\nvisitParents.EXIT = EXIT;\n\nfunction visitParents(tree, test, visitor, reverse) {\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor;\n    visitor = test;\n    test = null;\n  }\n\n  one(tree, null, []); // Visit a single node.\n\n  function one(node, index, parents) {\n    var result;\n\n    if (!test || is(test, node, index, parents[parents.length - 1] || null)) {\n      result = visitor(node, parents);\n\n      if (result === EXIT) {\n        return result;\n      }\n    }\n\n    if (node.children && result !== SKIP) {\n      return all(node.children, parents.concat(node)) === EXIT ? EXIT : result;\n    }\n\n    return result;\n  } // Visit children in `parent`.\n\n\n  function all(children, parents) {\n    var min = -1;\n    var step = reverse ? -1 : 1;\n    var index = (reverse ? children.length : min) + step;\n    var child;\n    var result;\n\n    while (index > min && index < children.length) {\n      child = children[index];\n      result = child && one(child, index, parents);\n\n      if (result === EXIT) {\n        return result;\n      }\n\n      index = typeof result === 'number' ? result : index + step;\n    }\n  }\n}","map":{"version":3,"sources":["/home/jfellows/Documents/git/jfy133/bingo/node_modules/unist-util-visit/node_modules/unist-util-visit-parents/index.js"],"names":["module","exports","visitParents","is","require","CONTINUE","SKIP","EXIT","tree","test","visitor","reverse","one","node","index","parents","result","length","children","all","concat","min","step","child"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,YAAjB;;AAEA,IAAIC,EAAE,GAAGC,OAAO,CAAC,eAAD,CAAhB;;AAEA,IAAIC,QAAQ,GAAG,IAAf;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,IAAI,GAAG,KAAX;AAEAL,YAAY,CAACG,QAAb,GAAwBA,QAAxB;AACAH,YAAY,CAACI,IAAb,GAAoBA,IAApB;AACAJ,YAAY,CAACK,IAAb,GAAoBA,IAApB;;AAEA,SAASL,YAAT,CAAsBM,IAAtB,EAA4BC,IAA5B,EAAkCC,OAAlC,EAA2CC,OAA3C,EAAoD;AAClD,MAAI,OAAOF,IAAP,KAAgB,UAAhB,IAA8B,OAAOC,OAAP,KAAmB,UAArD,EAAiE;AAC/DC,IAAAA,OAAO,GAAGD,OAAV;AACAA,IAAAA,OAAO,GAAGD,IAAV;AACAA,IAAAA,IAAI,GAAG,IAAP;AACD;;AAEDG,EAAAA,GAAG,CAACJ,IAAD,EAAO,IAAP,EAAa,EAAb,CAAH,CAPkD,CASlD;;AACA,WAASI,GAAT,CAAaC,IAAb,EAAmBC,KAAnB,EAA0BC,OAA1B,EAAmC;AACjC,QAAIC,MAAJ;;AAEA,QAAI,CAACP,IAAD,IAASN,EAAE,CAACM,IAAD,EAAOI,IAAP,EAAaC,KAAb,EAAoBC,OAAO,CAACA,OAAO,CAACE,MAAR,GAAiB,CAAlB,CAAP,IAA+B,IAAnD,CAAf,EAAyE;AACvED,MAAAA,MAAM,GAAGN,OAAO,CAACG,IAAD,EAAOE,OAAP,CAAhB;;AAEA,UAAIC,MAAM,KAAKT,IAAf,EAAqB;AACnB,eAAOS,MAAP;AACD;AACF;;AAED,QAAIH,IAAI,CAACK,QAAL,IAAiBF,MAAM,KAAKV,IAAhC,EAAsC;AACpC,aAAOa,GAAG,CAACN,IAAI,CAACK,QAAN,EAAgBH,OAAO,CAACK,MAAR,CAAeP,IAAf,CAAhB,CAAH,KAA6CN,IAA7C,GAAoDA,IAApD,GAA2DS,MAAlE;AACD;;AAED,WAAOA,MAAP;AACD,GA1BiD,CA4BlD;;;AACA,WAASG,GAAT,CAAaD,QAAb,EAAuBH,OAAvB,EAAgC;AAC9B,QAAIM,GAAG,GAAG,CAAC,CAAX;AACA,QAAIC,IAAI,GAAGX,OAAO,GAAG,CAAC,CAAJ,GAAQ,CAA1B;AACA,QAAIG,KAAK,GAAG,CAACH,OAAO,GAAGO,QAAQ,CAACD,MAAZ,GAAqBI,GAA7B,IAAoCC,IAAhD;AACA,QAAIC,KAAJ;AACA,QAAIP,MAAJ;;AAEA,WAAOF,KAAK,GAAGO,GAAR,IAAeP,KAAK,GAAGI,QAAQ,CAACD,MAAvC,EAA+C;AAC7CM,MAAAA,KAAK,GAAGL,QAAQ,CAACJ,KAAD,CAAhB;AACAE,MAAAA,MAAM,GAAGO,KAAK,IAAIX,GAAG,CAACW,KAAD,EAAQT,KAAR,EAAeC,OAAf,CAArB;;AAEA,UAAIC,MAAM,KAAKT,IAAf,EAAqB;AACnB,eAAOS,MAAP;AACD;;AAEDF,MAAAA,KAAK,GAAG,OAAOE,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsCF,KAAK,GAAGQ,IAAtD;AACD;AACF;AACF","sourcesContent":["'use strict'\n\nmodule.exports = visitParents\n\nvar is = require('unist-util-is')\n\nvar CONTINUE = true\nvar SKIP = 'skip'\nvar EXIT = false\n\nvisitParents.CONTINUE = CONTINUE\nvisitParents.SKIP = SKIP\nvisitParents.EXIT = EXIT\n\nfunction visitParents(tree, test, visitor, reverse) {\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    visitor = test\n    test = null\n  }\n\n  one(tree, null, [])\n\n  // Visit a single node.\n  function one(node, index, parents) {\n    var result\n\n    if (!test || is(test, node, index, parents[parents.length - 1] || null)) {\n      result = visitor(node, parents)\n\n      if (result === EXIT) {\n        return result\n      }\n    }\n\n    if (node.children && result !== SKIP) {\n      return all(node.children, parents.concat(node)) === EXIT ? EXIT : result\n    }\n\n    return result\n  }\n\n  // Visit children in `parent`.\n  function all(children, parents) {\n    var min = -1\n    var step = reverse ? -1 : 1\n    var index = (reverse ? children.length : min) + step\n    var child\n    var result\n\n    while (index > min && index < children.length) {\n      child = children[index]\n      result = child && one(child, index, parents)\n\n      if (result === EXIT) {\n        return result\n      }\n\n      index = typeof result === 'number' ? result : index + step\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}