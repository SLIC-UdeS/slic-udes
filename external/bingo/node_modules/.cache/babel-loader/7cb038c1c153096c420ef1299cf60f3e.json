{"ast":null,"code":"var _jsxFileName = \"/home/jfellows/Documents/git/jfy133/bingo/src/components/board.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport momentDurationFormatSetup from 'moment-duration-format';\nimport SimpleStorage from 'react-simple-storage';\nimport Header from './header';\nmomentDurationFormatSetup(moment);\n\nfunction copyObject(obj) {\n  return Object.assign({}, obj);\n}\n/* https://stackoverflow.com/a/12646864 */\n\n\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    var _ref = [array[j], array[i]];\n    array[i] = _ref[0];\n    array[j] = _ref[1];\n  }\n\n  return array;\n}\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    const size = props.size % 2 ? props.size : props.size - 1;\n    const cellCount = size * size;\n    const midpoint = (size * size - 1) / 2; // Ensure we have enough values to fill this size board.\n    // If not, keep adding duplicate values until we do.\n\n    let values = props.values.slice();\n    let i = 0;\n\n    while (values.length < cellCount) {\n      values.push(props.values[i]);\n      i++;\n      if (i > props.values.length - 1) i = 0;\n    }\n\n    this.state = {\n      activeCell: 0,\n      activeRow: 0,\n      activeCol: 0,\n      endTime: 0,\n      grid: this.generateRandomGrid(values, size),\n      midpoint: midpoint,\n      selection: {\n        [midpoint]: true\n      },\n      size: size,\n      startTime: Date.now(),\n      values: values\n    };\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.refreshBoard = this.refreshBoard.bind(this);\n    this.updateLeaderBoard = this.updateLeaderBoard.bind(this);\n  }\n  /**\n   * Randomize supplied values and return \n   * a grid with dimensions size * size\n   */\n\n\n  generateRandomGrid(values, size) {\n    const randomizedValues = shuffleArray(values);\n    let grid = [];\n\n    for (let row = 0; row < size; row++) {\n      grid[row] = [];\n\n      for (let col = 0; col < size; col++) {\n        let id = col + row * size;\n        grid[row][col] = {\n          value: randomizedValues[id],\n          id: id\n        };\n      }\n    }\n\n    return grid;\n  }\n\n  updateLeaderBoard() {\n    const name = document.getElementById('name').value;\n\n    if (name && name !== '') {\n      const data = {\n        name: name,\n        timestamp: this.state.endTime,\n        duration: this.state.endTime - this.state.startTime\n      };\n      const key = this.props.db.database().ref('games/' + this.props.gameId).child('leaderboard').push(data).key;\n      this.setState({\n        leaderboardSubmitted: true\n      });\n      return key;\n    }\n  }\n  /**\n   * Randomize cell values, reset timer, and clear selection.\n   */\n\n\n  refreshBoard() {\n    this.setState({\n      activeCell: 0,\n      activeRow: 0,\n      activeCol: 0,\n      bingo: false,\n      grid: this.generateRandomGrid(this.state.values, this.state.size),\n      leaderboardSubmitted: false,\n      selection: {\n        [this.state.midpoint]: true\n      },\n      startTime: Date.now(),\n      endTime: 0\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // not a new board\n    if (prevState.startTime === this.state.startTime) {\n      // focus active cell\n      if (prevState.activeCell !== this.state.activeCell) {\n        document.getElementById(this.props.id + '-cell-' + this.state.activeCell).focus();\n      } // if selection has changed in some way, check for bingo\n\n\n      if (prevState.selection !== this.state.selection) {\n        console.clear();\n        console.log('Checking for bingo...');\n\n        if (this.checkRow(this.state.activeRow) || this.checkCol(this.state.activeCol) || this.checkDiagonalA(this.state.activeRow, this.state.activeCol) || this.checkDiagonalB(this.state.activeRow, this.state.activeCol)) {\n          if (!this.state.bingo) {\n            console.log('It\\'s a bingo!');\n            this.setState({\n              bingo: true,\n              endTime: Date.now()\n            });\n          }\n        } else {\n          console.log('Alas, not a bingo.');\n          this.setState({\n            bingo: false\n          });\n        }\n      }\n    }\n  }\n\n  checkIndices(indices) {\n    for (let i = 0; i < indices.length; i++) {\n      let index = indices[i];\n\n      if (!this.state.selection[index]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  checkRow(row) {\n    const size = this.state.size;\n    const rowStart = row * size;\n\n    for (let i = rowStart; i < rowStart + size; i++) {\n      if (!this.state.selection[i]) {\n        console.log('- Bingo in row ' + row + '? Fail at cell ' + i);\n        return false;\n      }\n    }\n\n    console.log('- Bingo in row ' + row + '? Success!');\n    return true;\n  }\n\n  checkCol(col) {\n    const size = this.state.size;\n\n    for (let j = col; j < size * size; j += size) {\n      if (!this.state.selection[j]) {\n        console.log('- Bingo in col ' + col + '? Fail at cell ' + j);\n        return false;\n      }\n    }\n\n    console.log('- Bingo in col ' + col + '? Success!');\n    return true;\n  }\n  /* Upper left to lower right */\n\n\n  checkDiagonalA(row, col) {\n    const size = this.state.size;\n\n    if (row === col) {\n      for (let i = 0; i < size; i++) {\n        if (!this.state.selection[size * i + i]) {\n          console.log('- Bingo in diagonal A? Fail at cell ' + (size * i + i));\n          return false;\n        }\n      }\n\n      console.log('- Bingo in diagonal A? Success!');\n      return true;\n    }\n  }\n  /* Upper right to lower left */\n\n\n  checkDiagonalB(row, col) {\n    const size = this.state.size;\n\n    if (row === size - col - 1) {\n      for (let i = 0; i < size; i++) {\n        if (!this.state.selection[size * i + size - i - 1]) {\n          console.log('- Bingo in diagonal B? Fail at cell ' + (size * i + size - i - 1));\n          return false;\n        }\n      }\n\n      console.log('- Bingo in diagonal B? Success!');\n      return true;\n    }\n  }\n\n  handleKeyDown(event, row, col) {\n    switch (event.key) {\n      case 'Down':\n      case 'ArrowDown':\n        if (row < this.state.size - 1) this.setActiveCell(row + 1, col);\n        event.preventDefault();\n        break;\n\n      case 'Up':\n      case 'ArrowUp':\n        if (row > 0) this.setActiveCell(row - 1, col);\n        event.preventDefault();\n        break;\n\n      case 'Left':\n      case 'ArrowLeft':\n        if (col > 0) this.setActiveCell(row, col - 1);\n        event.preventDefault();\n        break;\n\n      case 'Right':\n      case 'ArrowRight':\n        if (col < this.state.size - 1) this.setActiveCell(row, col + 1);\n        event.preventDefault();\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  setActiveCell(row, col) {\n    this.setState({\n      activeCell: this.state.grid[row][col].id\n    });\n  }\n\n  renderMidpointCell(cellId, row, col) {\n    return /*#__PURE__*/React.createElement(\"td\", {\n      role: \"gridcell\",\n      key: cellId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cell-contents\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      \"aria-disabled\": true,\n      \"aria-pressed\": true,\n      className: \"cell-toggle\",\n      id: this.props.id + '-cell-' + cellId,\n      onClick: () => {\n        this.setState({\n          activeCell: cellId\n        });\n      },\n      onKeyDown: event => {\n        this.handleKeyDown(event, row, col);\n      },\n      tabIndex: cellId === this.state.activeCell ? '0' : '-1',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"svg\", {\n      role: \"img\",\n      \"aria-labelledby\": \"star-title\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      viewBox: \"0 0 24 24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"title\", {\n      id: \"star-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 15\n      }\n    }, \"Star (free tile)\"), /*#__PURE__*/React.createElement(\"path\", {\n      d: \"M12.6 1.4l2.2 7c.1.2.3.4.6.4h6.9c.7 0 1 .9.5 1.3l-5.7 4.2c-.2.1-.3.5-.2.7l2.7 7.2c.2.6-.5 1.2-1.1.7l-6-4.5c-.3-.2-.6-.2-.9 0l-6.1 4.5c-.5.5-1.3-.1-1-.7L7.1 15c.1-.2 0-.6-.3-.7l-5.6-4.2c-.6-.4-.2-1.3.4-1.3h6.9c.4 0 .6-.1.7-.4l2.2-7c.1-.7 1.1-.6 1.2 0z\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n  renderCell(cell, row, col) {\n    const isMidpoint = cell.id === this.state.midpoint;\n    const selected = this.state.selection[cell.id] || isMidpoint ? true : false;\n\n    if (isMidpoint) {\n      return this.renderMidpointCell(cell.id, row, col);\n    }\n\n    return /*#__PURE__*/React.createElement(\"td\", {\n      role: \"gridcell\",\n      key: cell.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cell-contents\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      \"aria-pressed\": selected,\n      className: \"cell-toggle\",\n      id: this.props.id + '-cell-' + cell.id,\n      onClick: () => {\n        let selection = copyObject(this.state.selection);\n        selection[cell.id] = !selected;\n        this.setState({\n          selection: selection,\n          activeCell: cell.id,\n          activeRow: row,\n          activeCol: col\n        });\n      },\n      onKeyDown: event => {\n        this.handleKeyDown(event, row, col);\n      },\n      tabIndex: cell.id === this.state.activeCell ? '0' : '-1',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }\n    }, cell.value)));\n  }\n\n  renderRow(row, y) {\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      role: \"row\",\n      key: y,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 7\n      }\n    }, row.map((cell, x) => {\n      return this.renderCell(cell, y, x);\n    }));\n  }\n\n  renderLeaderboardPrompt() {\n    if (this.state.bingo) {\n      if (this.state.leaderboardSubmitted) {\n        return /*#__PURE__*/React.createElement(\"p\", {\n          className: \"lh-copy mb0\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 11\n          }\n        }, \"You're on the leaderboard!\", ' ', \"Keep playing on this bingo board or\", ' ', /*#__PURE__*/React.createElement(\"button\", {\n          onClick: this.refreshBoard,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }\n        }, \"generate a new one\"), \".\");\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"pt3\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          htmlFor: \"name\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 13\n          }\n        }, \"Enter a name to display on the leaderboard:\"), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"pv2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          style: {\n            'backgroundColor': '#f6f7fa'\n          },\n          className: \"input-reset pa3 mb2 ba bw1 b--black\",\n          id: \"name\",\n          placeholder: \"Your Name\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 15\n          }\n        }), /*#__PURE__*/React.createElement(\"button\", {\n          className: \"tc fw8 blue-button white pa3 ml2 ba bw1 b--black\",\n          onClick: this.updateLeaderBoard,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 15\n          }\n        }, \"Add me!\")));\n      }\n    }\n\n    return null;\n  }\n\n  renderSuccess() {\n    if (this.state.bingo) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"success maxw-95 pa3 mv3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"flex flex-wrap items-center justify-between\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"w-50-l w-100 tc tl-l\",\n        role: \"alert\",\n        \"aria-live\": \"assertive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"f2 fw8\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 15\n        }\n      }, \"You got bingo! \", /*#__PURE__*/React.createElement(\"span\", {\n        role: \"img\",\n        \"aria-label\": \"Hurray!\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 55\n        }\n      }, \"\\uD83C\\uDF89\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"f3 pt2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 15\n        }\n      }, \"Total time: \", moment.duration(this.state.endTime - this.state.startTime).format('h [hr], m [min], s [sec]'))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"w-50-l w-100 tc tr-l\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 13\n        }\n      }, this.renderLeaderboardPrompt())));\n    }\n\n    return null;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      gotBingo: this.state.bingo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"tc fw8 bg-white black pa3 ba bw1 b--black mb2\",\n      onClick: this.refreshBoard,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 11\n      }\n    }, \"New Board\")), /*#__PURE__*/React.createElement(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      role: \"grid\",\n      className: \"maxw-95\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      role: \"rowgroup\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 13\n      }\n    }, this.state.grid.map((row, y) => {\n      return this.renderRow(row, y);\n    }))), this.renderSuccess()), /*#__PURE__*/React.createElement(SimpleStorage, {\n      parent: this,\n      prefix: \"bingo-\".concat(this.props.gameId),\n      blacklist: ['activeCell', 'activeRow', 'activeCol', 'values'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nBoard.propTypes = {\n  size: PropTypes.number,\n  values: PropTypes.array\n};\nBoard.defaultProps = {\n  size: 5,\n  values: 'abcdefghijklmnopqrstuv'.split('')\n};\nexport default Board;","map":{"version":3,"sources":["/home/jfellows/Documents/git/jfy133/bingo/src/components/board.jsx"],"names":["React","Component","PropTypes","moment","momentDurationFormatSetup","SimpleStorage","Header","copyObject","obj","Object","assign","shuffleArray","array","i","length","j","Math","floor","random","Board","constructor","props","size","cellCount","midpoint","values","slice","push","state","activeCell","activeRow","activeCol","endTime","grid","generateRandomGrid","selection","startTime","Date","now","handleKeyDown","bind","refreshBoard","updateLeaderBoard","randomizedValues","row","col","id","value","name","document","getElementById","data","timestamp","duration","key","db","database","ref","gameId","child","setState","leaderboardSubmitted","bingo","componentDidUpdate","prevProps","prevState","focus","console","clear","log","checkRow","checkCol","checkDiagonalA","checkDiagonalB","checkIndices","indices","index","rowStart","event","setActiveCell","preventDefault","renderMidpointCell","cellId","renderCell","cell","isMidpoint","selected","renderRow","y","map","x","renderLeaderboardPrompt","renderSuccess","format","render","propTypes","number","defaultProps","split"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport momentDurationFormatSetup from 'moment-duration-format';\nimport SimpleStorage from 'react-simple-storage';\nimport Header from './header';\n\nmomentDurationFormatSetup(moment);\n\nfunction copyObject(obj) {\n  return Object.assign({}, obj);\n}\n\n/* https://stackoverflow.com/a/12646864 */\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n\n  return array;\n}\n\nclass Board extends Component {\n\n  constructor(props) {\n    super(props);\n\n    const size = props.size % 2 ? props.size : props.size - 1;\n    const cellCount = size * size;\n    const midpoint = (size * size - 1)/ 2;\n\n    // Ensure we have enough values to fill this size board.\n    // If not, keep adding duplicate values until we do.\n    let values = props.values.slice();\n    let i = 0;\n    while (values.length < cellCount) {\n      values.push(props.values[i]);\n      i++;\n      if (i > props.values.length - 1) i = 0;\n    }\n\n    this.state = {\n      activeCell: 0,\n      activeRow: 0,\n      activeCol: 0,\n      endTime: 0,\n      grid: this.generateRandomGrid(values, size),\n      midpoint: midpoint,\n      selection: {[midpoint]: true},\n      size: size,\n      startTime: Date.now(),\n      values: values,\n    };\n\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.refreshBoard = this.refreshBoard.bind(this);\n    this.updateLeaderBoard = this.updateLeaderBoard.bind(this);\n  }\n\n  /**\n   * Randomize supplied values and return \n   * a grid with dimensions size * size\n   */\n  generateRandomGrid(values, size) {\n    const randomizedValues = shuffleArray(values);\n\n    let grid = [];\n    for (let row = 0; row < size; row++) {\n      grid[row] = [];\n      for (let col = 0; col < size; col++) {\n        let id = col + (row * size);\n        grid[row][col] = {\n          value: randomizedValues[id],\n          id: id\n        }\n      }\n    }\n\n    return grid;\n  }\n\n  updateLeaderBoard() {\n    const name = document.getElementById('name').value;\n    if (name && name !== '') {\n      const data = {\n        name: name,\n        timestamp: this.state.endTime,\n        duration: this.state.endTime - this.state.startTime\n      };\n      const key = this.props.db.database().ref('games/' + this.props.gameId).child('leaderboard').push(data).key;\n      this.setState({leaderboardSubmitted: true});\n      return key;\n    }\n  }\n\n  /**\n   * Randomize cell values, reset timer, and clear selection.\n   */\n  refreshBoard() {\n    this.setState({\n      activeCell: 0,\n      activeRow: 0,\n      activeCol: 0,\n      bingo: false,\n      grid: this.generateRandomGrid(this.state.values, this.state.size),\n      leaderboardSubmitted: false,\n      selection: {[this.state.midpoint]: true},\n      startTime: Date.now(),\n      endTime: 0\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // not a new board\n    if (prevState.startTime === this.state.startTime) {\n      // focus active cell\n      if (prevState.activeCell !== this.state.activeCell) {\n        document.getElementById(this.props.id + '-cell-' + this.state.activeCell).focus();\n      }\n\n      // if selection has changed in some way, check for bingo\n      if (prevState.selection !== this.state.selection) {\n        console.clear();\n        console.log('Checking for bingo...');\n        if (\n          this.checkRow(this.state.activeRow) ||\n          this.checkCol(this.state.activeCol) ||\n          this.checkDiagonalA(this.state.activeRow, this.state.activeCol) ||\n          this.checkDiagonalB(this.state.activeRow, this.state.activeCol)\n        ) {\n          if (!this.state.bingo) {\n            console.log('It\\'s a bingo!');\n            this.setState({\n              bingo: true,\n              endTime: Date.now(),\n            });\n          }\n        } else {\n          console.log('Alas, not a bingo.')\n          this.setState({bingo: false});\n        }\n      }\n    }\n  }\n\n  checkIndices(indices) {\n    for (let i = 0; i < indices.length; i++) {\n      let index = indices[i];\n      if (!this.state.selection[index]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  checkRow(row) {\n    const size = this.state.size;\n    const rowStart = row * size;\n    for (let i = rowStart; i < rowStart + size; i++) {\n      if (!this.state.selection[i]) {\n        console.log('- Bingo in row ' + row + '? Fail at cell ' + i);\n        return false;\n      }\n    }\n    console.log('- Bingo in row ' + row + '? Success!');\n    return true;\n  }\n\n  checkCol(col) {\n    const size = this.state.size;\n    for (let j = col; j < size * size; j+= size) {\n      if (!this.state.selection[j]) {\n        console.log('- Bingo in col ' + col + '? Fail at cell ' + j);\n        return false;\n      }\n    }\n    console.log('- Bingo in col ' + col + '? Success!');\n    return true;\n  }\n\n  /* Upper left to lower right */\n  checkDiagonalA(row, col) {\n    const size = this.state.size;\n    if (row === col) {\n      for (let i = 0; i < size; i++) {\n        if (!this.state.selection[size * i + i]) {\n          console.log('- Bingo in diagonal A? Fail at cell ' + (size * i + i));\n          return false;\n        }\n      }\n      console.log('- Bingo in diagonal A? Success!');\n      return true;\n    }\n  }\n\n  /* Upper right to lower left */\n  checkDiagonalB(row, col) {\n    const size = this.state.size;\n    if (row === (size - col - 1)) {\n      for (let i = 0; i < size; i++) {\n        if (!this.state.selection[size * i + size - i - 1]) {\n          console.log('- Bingo in diagonal B? Fail at cell ' + (size * i + size - i - 1));\n          return false;\n        }\n      }\n      console.log('- Bingo in diagonal B? Success!')\n      return true;\n    }\n  }\n\n  handleKeyDown(event, row, col) {\n    switch (event.key) {\n      case 'Down':\n      case 'ArrowDown':\n        if (row < this.state.size - 1) this.setActiveCell(row + 1, col);\n        event.preventDefault();\n        break;\n      case 'Up':\n      case 'ArrowUp':\n        if (row > 0) this.setActiveCell(row - 1, col);\n        event.preventDefault();\n        break;\n      case 'Left':\n      case 'ArrowLeft':\n        if (col > 0) this.setActiveCell(row, col - 1);\n        event.preventDefault();\n        break;\n      case 'Right':\n      case 'ArrowRight':\n        if (col < this.state.size - 1) this.setActiveCell(row, col + 1);\n        event.preventDefault();\n        break;\n      default:\n        break;\n    }\n  }\n\n  setActiveCell(row, col) {\n    this.setState({activeCell: this.state.grid[row][col].id});\n  }\n\n  renderMidpointCell(cellId, row, col) {\n    return (\n      <td role='gridcell' key={cellId}>\n        <div className='cell-contents'>\n          <button\n            aria-disabled={true}\n            aria-pressed={true}\n            className='cell-toggle'\n            id={this.props.id + '-cell-' + cellId}\n            onClick={() => {this.setState({activeCell : cellId});}}\n            onKeyDown={(event) => {this.handleKeyDown(event, row, col);}}\n            tabIndex={cellId === this.state.activeCell ? '0' : '-1'}\n          >\n            <svg role=\"img\" aria-labelledby=\"star-title\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n              <title id=\"star-title\">Star (free tile)</title>\n              <path d=\"M12.6 1.4l2.2 7c.1.2.3.4.6.4h6.9c.7 0 1 .9.5 1.3l-5.7 4.2c-.2.1-.3.5-.2.7l2.7 7.2c.2.6-.5 1.2-1.1.7l-6-4.5c-.3-.2-.6-.2-.9 0l-6.1 4.5c-.5.5-1.3-.1-1-.7L7.1 15c.1-.2 0-.6-.3-.7l-5.6-4.2c-.6-.4-.2-1.3.4-1.3h6.9c.4 0 .6-.1.7-.4l2.2-7c.1-.7 1.1-.6 1.2 0z\"></path>\n            </svg>\n          </button>\n        </div>\n      </td>\n    );\n  }\n\n  renderCell(cell, row, col) {\n    const isMidpoint = cell.id === this.state.midpoint;\n    const selected = this.state.selection[cell.id] || isMidpoint ? true : false;\n\n    if (isMidpoint) { return this.renderMidpointCell(cell.id, row, col); }\n\n    return (\n      <td role='gridcell' key={cell.id}>\n        <div className='cell-contents'>\n          <button\n            aria-pressed={selected}\n            className='cell-toggle'\n            id={this.props.id + '-cell-' + cell.id}\n            onClick={() => {\n              let selection = copyObject(this.state.selection);\n              selection[cell.id] = !selected;\n\n              this.setState({\n                selection: selection,\n                activeCell: cell.id,\n                activeRow: row,\n                activeCol: col\n              });\n            }}\n            onKeyDown={(event) => {this.handleKeyDown(event, row, col);}}\n            tabIndex={cell.id === this.state.activeCell ? '0' : '-1'}\n          >\n            {/*cell.id*/}\n            {cell.value} \n          </button>\n        </div>\n      </td>\n    );\n  }\n\n  renderRow(row, y) {\n    return (\n      <tr role='row' key={y}>\n        {row.map((cell, x) => { return this.renderCell(cell, y, x); })}\n      </tr>\n    );\n  }\n\n  renderLeaderboardPrompt() {\n    if (this.state.bingo) {\n      if (this.state.leaderboardSubmitted) {\n        return (\n          <p className='lh-copy mb0'>\n            You're on the leaderboard!{' '}\n            Keep playing on this bingo board or{' '}\n            <button onClick={this.refreshBoard}>generate a new one</button>.\n          </p>\n        );\n      } else {\n        return (\n          <div className='pt3'>\n            <label htmlFor='name'>Enter a name to display on the leaderboard:</label>\n            <div className='pv2'>\n              <input\n                style={{'backgroundColor': '#f6f7fa'}}\n                className='input-reset pa3 mb2 ba bw1 b--black'\n                id='name'\n                placeholder='Your Name' />\n              <button\n                className='tc fw8 blue-button white pa3 ml2 ba bw1 b--black'\n                onClick={this.updateLeaderBoard}\n              >\n                Add me!\n              </button>\n            </div>\n          </div>\n        );\n      }\n    }\n    return null;\n  }\n\n  renderSuccess() {\n    if (this.state.bingo) {\n      return (\n        <div className='success maxw-95 pa3 mv3'>\n          <div className='flex flex-wrap items-center justify-between'>\n            <div className='w-50-l w-100 tc tl-l' role='alert' aria-live='assertive'>\n              <span className='f2 fw8'>You got bingo! <span role=\"img\" aria-label=\"Hurray!\">🎉</span></span>\n              <div className='f3 pt2'>\n                Total time: {moment.duration(this.state.endTime - this.state.startTime).format('h [hr], m [min], s [sec]')}\n              </div>\n            </div>\n            <div className='w-50-l w-100 tc tr-l'>\n              {this.renderLeaderboardPrompt()}\n            </div>\n          </div>\n        </div>\n      )\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <div>\n        <Header gotBingo={this.state.bingo}>\n          <button\n            className='tc fw8 bg-white black pa3 ba bw1 b--black mb2'\n            onClick={this.refreshBoard}\n          >\n            New Board\n          </button>\n        </Header>\n        <main>\n          <table role='grid' className='maxw-95'>\n            <tbody role='rowgroup'>\n              {this.state.grid.map((row, y) => { return (this.renderRow(row, y))})}\n            </tbody>\n          </table>\n          {this.renderSuccess()}\n        </main>\n        { /* Stores current board state in local storage so\n             game is preserved even when refreshed */ }\n        <SimpleStorage\n          parent={this}\n          prefix={`bingo-${this.props.gameId}`}\n          blacklist={['activeCell', 'activeRow', 'activeCol', 'values']}\n        />\n      </div>\n    );\n  }\n}\n\nBoard.propTypes = {\n  size: PropTypes.number,\n  values: PropTypes.array\n}\n\nBoard.defaultProps = {\n  size: 5,\n  values: 'abcdefghijklmnopqrstuv'.split('')\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}