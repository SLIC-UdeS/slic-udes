{"ast":null,"code":"'use strict';\n\nvar xtend = require('xtend');\n\nvar inherits = require('inherits');\n\nmodule.exports = unherit;\n/* Create a custom constructor which can be modified\n * without affecting the original class. */\n\nfunction unherit(Super) {\n  var result;\n  var key;\n  var value;\n  inherits(Of, Super);\n  inherits(From, Of);\n  /* Clone values. */\n\n  result = Of.prototype;\n\n  for (key in result) {\n    value = result[key];\n\n    if (value && typeof value === 'object') {\n      result[key] = 'concat' in value ? value.concat() : xtend(value);\n    }\n  }\n\n  return Of;\n  /* Constructor accepting a single argument,\n   * which itself is an `arguments` object. */\n\n  function From(parameters) {\n    return Super.apply(this, parameters);\n  }\n  /* Constructor accepting variadic arguments. */\n\n\n  function Of() {\n    if (!(this instanceof Of)) {\n      return new From(arguments);\n    }\n\n    return Super.apply(this, arguments);\n  }\n}","map":{"version":3,"sources":["/home/jfellows/Documents/git/jfy133/bingo/node_modules/unherit/index.js"],"names":["xtend","require","inherits","module","exports","unherit","Super","result","key","value","Of","From","prototype","concat","parameters","apply","arguments"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,OAAjB;AAEA;;;AAEA,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,MAAIC,MAAJ;AACA,MAAIC,GAAJ;AACA,MAAIC,KAAJ;AAEAP,EAAAA,QAAQ,CAACQ,EAAD,EAAKJ,KAAL,CAAR;AACAJ,EAAAA,QAAQ,CAACS,IAAD,EAAOD,EAAP,CAAR;AAEA;;AACAH,EAAAA,MAAM,GAAGG,EAAE,CAACE,SAAZ;;AAEA,OAAKJ,GAAL,IAAYD,MAAZ,EAAoB;AAClBE,IAAAA,KAAK,GAAGF,MAAM,CAACC,GAAD,CAAd;;AAEA,QAAIC,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA9B,EAAwC;AACtCF,MAAAA,MAAM,CAACC,GAAD,CAAN,GAAc,YAAYC,KAAZ,GAAoBA,KAAK,CAACI,MAAN,EAApB,GAAqCb,KAAK,CAACS,KAAD,CAAxD;AACD;AACF;;AAED,SAAOC,EAAP;AAEA;;;AAEA,WAASC,IAAT,CAAcG,UAAd,EAA0B;AACxB,WAAOR,KAAK,CAACS,KAAN,CAAY,IAAZ,EAAkBD,UAAlB,CAAP;AACD;AAED;;;AACA,WAASJ,EAAT,GAAc;AACZ,QAAI,EAAE,gBAAgBA,EAAlB,CAAJ,EAA2B;AACzB,aAAO,IAAIC,IAAJ,CAASK,SAAT,CAAP;AACD;;AAED,WAAOV,KAAK,CAACS,KAAN,CAAY,IAAZ,EAAkBC,SAAlB,CAAP;AACD;AACF","sourcesContent":["'use strict'\n\nvar xtend = require('xtend')\nvar inherits = require('inherits')\n\nmodule.exports = unherit\n\n/* Create a custom constructor which can be modified\n * without affecting the original class. */\nfunction unherit(Super) {\n  var result\n  var key\n  var value\n\n  inherits(Of, Super)\n  inherits(From, Of)\n\n  /* Clone values. */\n  result = Of.prototype\n\n  for (key in result) {\n    value = result[key]\n\n    if (value && typeof value === 'object') {\n      result[key] = 'concat' in value ? value.concat() : xtend(value)\n    }\n  }\n\n  return Of\n\n  /* Constructor accepting a single argument,\n   * which itself is an `arguments` object. */\n  function From(parameters) {\n    return Super.apply(this, parameters)\n  }\n\n  /* Constructor accepting variadic arguments. */\n  function Of() {\n    if (!(this instanceof Of)) {\n      return new From(arguments)\n    }\n\n    return Super.apply(this, arguments)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}