---
import PageLayout from '@layouts/PageLayout.astro';
import FooterPrevNext from '@components/footer/FooterPrevNext.astro';
import MarkdownWrapper from '@components/markdown/MarkdownWrapper.svelte';
import SidebarNav from '@components/sidebar/SidebarNav.astro';
import SidebarToc from '@components/sidebar/SidebarToc.svelte';
import { CollectionEntry, getCollection } from 'astro:content';

export interface Props {
    title: string;
    subtitle: string;
    md_github_url: string;
    headings: { text: string; slug: string; depth: number; fa_icon?: string }[];
    event_header?: object[];
    left_sidebar?: boolean;
    sections?: { section_name: string; children: {}[] }[] | never[];
}

let { title, subtitle, md_github_url, event_header, headings, left_sidebar, sections } = Astro.props;

let prev_page: CollectionEntry<'docs'> | null = null;
let next_page: CollectionEntry<'docs'> | null = null;
if (Astro.url.pathname.startsWith('/docs/')) {
    const docs = await getCollection('docs');
    const subpages = docs.filter((doc) => {
        return doc.slug.split('/').length === 2;
    });
    sections = [
        { section_name: 'Usage', children: [] },
        { section_name: 'Contributing', children: [] },
    ];
    subpages.map((doc) => {
        if (doc.slug.startsWith('usage/')) {
            let index = sections.findIndex((section) => section.section_name === 'Usage');
            sections[index].children.push({ title: doc.data.title, slug: '/docs/' + doc.slug + '/' });
        }
        if (doc.slug.startsWith('contributing/')) {
            let index = sections.findIndex((section) => section.section_name === 'Contributing');
            sections[index].children.push({ title: doc.data.title, slug: '/docs/' + doc.slug + '/' });
        }
    });
    // find the index of the current page and use that to get the previous and next page
    const url = Astro.url.pathname.replace('/docs/', '').replace(/\/$/, '');
    const current_page_index = docs.findIndex(
        (page) => page.slug === Astro.url.pathname.replace('/docs/', '').replace(/\/$/, '')
    );
    if (current_page_index === -1) {
        console.error('Could not find current page ' + Astro.url.pathname + ' in docs collection');
    } else {
        prev_page = docs[current_page_index - 1];
        prev_page =
            prev_page && prev_page.slug?.split('/').slice(-2)[0] === url.split('/').slice(-2)[0] ? prev_page : null;
        next_page = docs[current_page_index + 1];
        next_page =
            next_page && next_page.slug?.split('/').slice(-2)[0] === url.split('/').slice(-2)[0] ? next_page : null;
    }
}
---

<script>
    // Switch any images with .darkmode-image class to the correct version for the theme
    function switchDarkModeImages() {
        const theme = document.documentElement.getAttribute('data-bs-theme');
        const images = document.querySelectorAll('img.darkmode-image');
        for (const img of images) {
            if (theme === 'light') {
                img.src = img.src.replace('/white/', '/colour/');
            } else if (theme === 'dark') {
                img.src = img.src.replace('/colour/', '/white/');
            }
        }
    }
    // change images on page load, based on current theme
    window.addEventListener('load', () => {
        switchDarkModeImages();
    });
    // listen for even dispatched from ThemeSwitch.svelte
    window.addEventListener('theme-changed', (e) => {
        switchDarkModeImages();
    });
</script>
<PageLayout
    title={title}
    subtitle={subtitle}
    md_github_url={md_github_url}
    event_header={event_header}
    subfooter={md_github_url ? true : false}
    mainpage_container={true}
    navTocHeadings={headings}
>
    <div class="row">
        {
            left_sidebar && (
                <div class="col-12 col-md-2 sticky-top-under d-none d-md-inline sidebar-left">
                    <SidebarNav items={sections} />
                </div>
            )
        }
        <div class:list={['col-12', { 'col-md-10': !left_sidebar, 'col-md-8': left_sidebar }]}>
            <div class="markdown-content">
                <MarkdownWrapper headings={headings} client:idle>
                    <slot />
                </MarkdownWrapper>
            </div>
        </div>
        <div class="col-12 col-md-2 toc">
            <SidebarToc headings={headings} client:idle />
        </div>
    </div>
    {
        Astro.url.pathname.startsWith('/docs/') && (
            <FooterPrevNext
                slot="pre-footer"
                md_github_url={md_github_url}
                prev_page={prev_page}
                next_page={next_page}
            />
        )
    }
</PageLayout>
<style lang="scss">
    .sidebar-left {
        max-height: calc(100vh - 4rem);
        overflow-y: auto;
    }
</style>
