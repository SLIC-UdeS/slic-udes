---
import PageLayout from '@layouts/PageLayout.astro';
import MarkdownWrapper from '@components/markdown/MarkdownWrapper.svelte';
import SidebarNav from '@components/sidebar/SidebarNav.astro';
import SidebarToc from '@components/sidebar/SidebarToc.svelte';
import 'katex/dist/katex.min.css';

export interface Props {
    title: string;
    subtitle: string;
    md_github_url: string;
    headings: { text: string; slug: string; depth: number; fa_icon?: string }[];
    event_header?: object[];
    left_sidebar?: boolean;
    sections?: { section_name: string; children: {}[] }[] | never[];
    viewTransitions?: boolean;
    meta_title?: string;
    docSearchTags?: {
        name: string;
        content: string;
    }[];
    minHeadingDepth?: number;
    maxHeadingDepth?: number;
}

const {
    title,
    subtitle,
    md_github_url,
    event_header,
    headings,
    left_sidebar,
    sections = [],
    viewTransitions = false,
    meta_title = '',
    docSearchTags = [],
    minHeadingDepth = 1,
    maxHeadingDepth = 4,
} = Astro.props;
---

<script>
    // Switch any images with .darkmode-image class to the correct version for the theme
    function switchDarkModeImages() {
        const theme = document.documentElement.getAttribute('data-bs-theme');
        const images = document.querySelectorAll('img.darkmode-image');
        for (const img of images) {
            if (theme === 'light') {
                img.src = img.src.replace('/white/', '/colour/');
            } else if (theme === 'dark') {
                img.src = img.src.replace('/colour/', '/white/');
            }
        }
    }
    // change images on page load, based on current theme
    window.addEventListener('load', () => {
        switchDarkModeImages();
    });
    // listen for even dispatched from ThemeSwitch.svelte
    window.addEventListener('theme-changed', (e) => {
        switchDarkModeImages();
    });
</script>
<PageLayout
    title={title}
    meta_title={meta_title}
    subtitle={subtitle}
    md_github_url={md_github_url}
    event_header={event_header}
    subfooter={md_github_url && !Astro.url.pathname.startsWith('/docs/') ? true : false}
    mainpage_container={true}
    navTocHeadings={headings}
    sections={sections}
    docSearchTags={docSearchTags}
    viewTransitions={viewTransitions}
    mermaid={true}
>
    <div class="row">
        {
            left_sidebar && (
                <div class="col-12 col-md-2 sticky-top-under d-none d-md-inline sidebar-left pt-1">
                    <SidebarNav items={sections} />
                </div>
            )
        }
        <div class:list={['col-12', { 'col-md-10': !left_sidebar, 'col-md-8': left_sidebar }]}>
            <div class="markdown-content" transition:animate="morph">
                <MarkdownWrapper headings={headings} client:idle>
                    <slot />
                </MarkdownWrapper>
            </div>
        </div>
        <div class="col-12 col-md-2 toc">
            <SidebarToc
                headings={headings}
                minHeadingDepth={minHeadingDepth}
                maxHeadingDepth={maxHeadingDepth}
                client:idle
            />
        </div>
    </div>
    <slot name="pre-footer" slot="pre-footer" />
</PageLayout>
<style lang="scss">
    .markdown-content :global(img[loading='lazy']) {
        aspect-ratio: attr(width) / attr(height);
        height: auto;
    }
</style>
