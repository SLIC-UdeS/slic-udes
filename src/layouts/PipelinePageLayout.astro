---
import PageLayout from '@layouts/PageLayout.astro';
import SubHeader from '@components/header/SubHeader.astro';
import TabBar from '@components/TabBar.astro';
import pipelines_json from '@public/pipelines.json';

export interface Props {
    pipeline: string | undefined;
    meta_title: string;
    subtitle?: string | null;
    version?: string;
    versions?: string[];
    headings?: { text: string; slug: string; depth: number; fa_icon?: string }[];
    tabItems?: string[];
    md_github_url?: string;
    sections?: { section_name: string; children: {}[] }[] | never[];
    docSearchTags?: { name: string; content: string | string[] }[];
}

let {
    pipeline,
    meta_title = pipeline,
    subtitle,
    headings,
    version,
    versions = [],
    tabItems = [],
    md_github_url = '',
    sections = [],
    docSearchTags = [],
} = Astro.props;
const url = Astro.url.pathname;
const baseUrl = '/' + pipeline + '/' + version;
let allTabItems: { label: string; href: string; active: boolean; icon?: string }[] = [];

allTabItems = tabItems
    .filter((file) => file.split('/').length === 1)
    .map((file) => {
        return {
            label: file.replace(/-|_/g, ' ').replace(/\w\S*/g, (txt: string) => {
                return txt.charAt(0).toUpperCase() + txt.substring(1).toLowerCase();
            }),
            href: baseUrl + '/docs/' + file + '/',
            active: url.includes(baseUrl + '/docs/' + file),
            icon: tabItems.some((f) => f.startsWith(file + '/')) ? 'fa-regular fa-books' : '',
        };
    });

allTabItems.unshift({
    label: 'Introduction',
    href: `/${pipeline}/${version}/`,
    active: url === `/${pipeline}/${version}/` || url === `/${pipeline}/${version}`,
    icon: 'fa-solid fa-sign-in',
});

const latestVersion = versions[0];
const hasSchema = pipelines_json.remote_workflows
    .find((wf) => wf.name === pipeline)
    ?.releases.find((r) => r.tag_name === version)?.has_schema;
if (hasSchema) {
    // Add the parameters tab if there is a schema
    allTabItems.push({
        label: 'Parameters',
        href: `/${pipeline}/${version}/parameters/`,
        active: url.includes('/parameters'),
        icon: 'fa-regular fa-list',
    });
}
if (version !== 'dev') {
    const releaseSHA = pipelines_json.remote_workflows
        .find((wf) => wf.name === pipeline)
        ?.releases.find((r) => r.tag_name === version)?.tag_sha;
    allTabItems.splice(1, 0, {
        label: 'Results',
        href: `/${pipeline}/${version}/results/${pipeline}/results-${releaseSHA}/`,
        active: url.includes(`/${pipeline}/${version}/results/`),
        icon: 'fa-brands fa-aws',
    });
}
if (versions.filter((v) => v !== 'dev').length > 0) {
    allTabItems.push({
        label: 'Releases',
        href: `/${pipeline}/releases_stats/`,
        active: url.includes(`/${pipeline}/releases_stats`),
        icon: 'fa-regular fa-chart-line',
    });
}
const sortOrder = ['Introduction', 'Usage', 'Parameters', 'Output', 'Results', 'Releases'];
allTabItems.sort((a, b) => sortOrder.indexOf(a.label) - sortOrder.indexOf(b.label));

const gh_url = 'https://github.com/nf-core/' + pipeline;
const topics = pipelines_json.remote_workflows.find((wf) => wf.name === pipeline)?.topics || [];
---

<PageLayout
    title={'nf-core/' + pipeline}
    meta_title={meta_title}
    subtitle={subtitle}
    mainpage_container={true}
    navTocHeadings={headings}
    md_github_url={md_github_url}
    subfooter={md_github_url !== ''}
    topics={topics}
    sections={sections}
    viewTransitions={true}
    docSearchTags={[
        ...docSearchTags,
        { name: 'version', content: latestVersion === version ? [version, 'latest'] : version },
        { name: 'page_type', content: 'Pipeline' },
    ]}
>
    <SubHeader pipeline={pipeline} version={version} latestVersion={latestVersion} gh_url={gh_url} slot="sub-header" />
    {
        tabItems.length > 0 && (
            <TabBar items={allTabItems}>
                {!Astro.url.pathname.endsWith('/releases_stats/') && (
                    <div class="input-group input-group-sm justify-content-end justify-content-lg-center">
                        <label class="input-group-text" for="version_select">
                            <i class="fas fa-tags" />
                        </label>
                        <div class="dropdown">
                            <button
                                class="btn btn-secondary dropdown-toggle rounded-start-0"
                                type="button"
                                data-bs-toggle="dropdown"
                                aria-expanded="false"
                            >
                                {version === 'latest' ? versions[0] : version}
                            </button>

                            <ul class="dropdown-menu dropdown-menu-end w-100 pipeline-versions">
                                {versions &&
                                    versions.map((v) => {
                                        if (version === 'latest') {
                                            version = versions[0];
                                        }
                                        let url = Astro.url.pathname.replace(
                                            `${pipeline}/${version}`,
                                            `${pipeline}/${v}`,
                                        );
                                        if (url.includes('/results/')) {
                                            url = `/${pipeline}/${v}/results/`;
                                        }
                                        return (
                                            <li>
                                                <a
                                                    class={'dropdown-item ' + (v === version ? 'active' : '')}
                                                    href={url}
                                                >
                                                    {v}
                                                </a>
                                            </li>
                                        );
                                    })}
                            </ul>
                        </div>
                    </div>
                )}
            </TabBar>
        )
    }

    <div transition:animate="slide">
        <slot />
    </div>
</PageLayout>
<style lang="scss"></style>
