---
import { Markdown } from '@astropub/md';
import MarkdownWrapper from '@components/markdown/MarkdownWrapper.svelte';
import SidebarToc from '@components/sidebar/SidebarToc.svelte';
import PipelinePageLayout from '@layouts/PipelinePageLayout.astro';
import pipelines_json from '@public/pipelines.json';
import cache from 'bin/cache.js';

export function getStaticPaths() {
    var paths: { params: { pipeline: string; version: string; md_file: string }; props: { versions; md_files } }[] = [];
    pipelines_json.remote_workflows.forEach((pipeline) => {
        pipeline.releases.forEach((release) => {
            const md_files = release.doc_files.map((file) => file.replace('docs/', '').replace('.md', ''));
            md_files.forEach((md_file) => {
                paths.push({
                    params: {
                        pipeline: pipeline.name,
                        version: release.tag_name,
                        md_file: md_file,
                    },
                    props: {
                        versions: pipeline.releases.map((release) => release.tag_name),
                        md_files: md_files,
                    },
                });
            });
        });
    });
    return paths;
}
const { pipeline, version, md_file } = Astro.params;
const { versions, md_files } = Astro.props;
let headings = [];

const description = pipelines_json.remote_workflows.filter((p) => p.name === pipeline).description;

const baseUrl = '/' + pipeline + '/' + version;
let tabItems = md_files.map((file) => {
    return {
        label: file.replace(/-/g, ' ').replace(/\w\S*/g, (txt) => {
            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        }),
        href: baseUrl + '/' + file,
        active: file === md_file,
    };
});
const cache_key = `${pipeline}/${version}/docs/${md_file}.md`;

const md_content = await cache
    .get(cache_key)
    .catch((error) => {
        console.log(error);
        return { definitions: {} };
    })
    .then((response) => {
        let content = response;
        if (content === undefined) {
            console.log(`Cache miss for ${cache_key}`);
        }

        const text_content = content.replace(/```(.*?)```/gs, '');
        // get headings and their depth for table of contents
        headings = text_content.match(/^(#{1,6})\s(.*)$/gm).map((heading) => {
            const depth = heading.match(/^(#{1,6})/)[0].length;
            let text = heading.match(/^(#{1,6})\s(.*)$/)[2];
            // check if exactly two backticks are used to wrap text
            if (text.match(/`(.+?)`/g)) {
                text = text.replace(/`(.+?)`/g, '<code>$1</code>');
                const slug = text
                    .replace(/<code>(.*?)<\/code>/g, '$1')
                    .toLowerCase()
                    .replace(/ /g, '-')
                    .replace(/[^\w-]+/g, '');
                return { depth, text, slug };
            } else {
                const slug = text
                    .toLowerCase()
                    .replace(/ /g, '-')
                    .replace(/[^\w-]+/g, '');
                return { depth, text, slug };
            }
        });
        return content;
    });

const max_heading_depth = 2;
// filter out headings that are higher than max_heading_depth
headings = headings.filter((h) => h.depth <= max_heading_depth);

//make md_file title case
const md_file_title = md_file.replace(/-/g, ' ').replace(/\w\S*/g, (txt) => {
    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
});

export const prerender = true;
---

<PipelinePageLayout
    pipeline={pipeline}
    subtitle={description}
    headings={headings}
    version={version}
    versions={versions}
    tabItems={tabItems}
    md_github_url={`https://github.com/nf-core/${pipeline}/blob/${version}/docs/${md_file}.md`}
>
    <div
        class="row"
        data-pagefind-filter=`category:pipeline`
        data-pagefind-meta=`title:${pipeline}(${version}) ${md_file_title}`
    >
        <div class="col-12 col-md-9 pt-3">
            <MarkdownWrapper client:load headings={headings}>
                <Markdown of={md_content} />
            </MarkdownWrapper>
        </div>
        <div class="col-12 col-md-3 toc">
            <SidebarToc headings={headings} client:idle />
        </div>
    </div>
</PipelinePageLayout>
