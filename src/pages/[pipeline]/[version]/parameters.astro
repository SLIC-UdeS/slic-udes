---
import SchemaListing from '@components/schema/SchemaListing.svelte';
import SchemaListingToc from '@components/schema/SchemaListingToc.svelte';
import cache from 'bin/cache.js';
import PipelinePageLayout from '@layouts/PipelinePageLayout.astro';
import pipelines_json from '@public/pipelines.json';

export function getStaticPaths() {
    var paths: { params: { pipeline: string; version: string; md_file: string }; props: { versions; md_files } }[] = [];
    pipelines_json.remote_workflows.forEach((pipeline) => {
        pipeline.releases.forEach((release) => {
            const md_files = release.doc_files.map((file) => file.replace('docs/', '').replace('.md', ''));
            paths.push({
                params: {
                    pipeline: pipeline.name,
                    version: release.tag_name,
                },
                props: {
                    versions: pipeline.releases.map((release) => release.tag_name),
                    md_files: md_files,
                },
            });
        });
    });
    return paths;
}
const { pipeline, version } = Astro.params;
let headings = [];
const description = pipelines_json.remote_workflows.filter((p) => p.name === pipeline).description;
const baseUrl = '/' + pipeline + '/' + version;

let { versions, md_files } = Astro.props;
let tabItems = md_files.map((file) => {
    return {
        label: file.replace(/-/g, ' ').replace(/\w\S*/g, (txt) => {
            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        }),
        href: baseUrl + '/' + file,
        active: false,
    };
});

const cache_key = `${pipeline}/${version}/nextflow_schema.json`;
let schema = await cache
    .get(cache_key)
    .then((response) => {
        return JSON.parse(response);
    })
    .catch((error) => {
        console.log(error);
        return { definitions: {} };
    });

if (schema.definitions && Object.keys(schema.definitions).length > 0) {
    headings = Object.entries(schema.definitions).map(([key, value]) => {
        return {
            slug: key.replaceAll('_', '-'),
            text: value.title,
            depth: 1,
            fa_icon: value.fa_icon,
        };
    });
} else if (schema.properties && Object.keys(schema.properties).length > 0) {
    schema.definitions = schema.properties; // catching the case where there is no definitions but only properties
}

export const prerender = true;
---

<PipelinePageLayout
    pipeline={pipeline}
    subtitle={description}
    headings={headings}
    version={version}
    versions={versions}
    tabItems={tabItems}
>
    <div
        class="row"
        data-pagefind-filter=`category:pipeline`
        data-pagefind-meta=`title:${pipeline}(${version}) Parameters`
    >
        <div class="col-12 col-md-10">
            {
                Object.keys(schema.definitions).length === 0 && (
                    <div class="alert alert-warning mt-3 " role="alert">
                        <h4 class="text-warning">No nextflow_schema.json file found!</h4>
                        <p>
                            It seems like there is no nextflow_schema.json file with parameters defined for this version
                            of the pipeline. Try a newer version.
                        </p>
                    </div>
                )
            }

            <SchemaListing {schema} client:load />
        </div>
        <div class="col-12 col-md-2 toc order-first order-md-last pe-0">
            <SchemaListingToc headings={headings} client:idle />
        </div>
    </div>
</PipelinePageLayout>

<style lang="scss"></style>
