---
import ResultsLayout from '@layouts/ResultsLayout.astro';
import pipelines_json from '@public/pipelines.json';
import { S3Client, ListObjectsV2Command } from '@aws-sdk/client-s3';

export async function getStaticPaths() {
    let paths: {
        params: {
            pipeline: string;
            version: string;
            results_path: string;
        };
        props: {
            content: { Key: string; LastModified: Date; ETag: string; Size: number; StorageClass: string }[];
        };
    }[] = [];

    let bucketContents: { Key: string; LastModified: Date; ETag: string; Size: number; StorageClass: string }[] = [];

    async function getKeysWithPrefixes(prefixes) {
        let client = new S3Client({
            region: 'eu-west-1',
            signer: { sign: async (request) => request },
        });
        const requests = prefixes.map((prefix) => {
            const command = new ListObjectsV2Command({
                Bucket: 'nf-core-awsmegatests',
                Prefix: prefix,
            });
            return client.send(command);
        });

        try {
            const responses = await Promise.all(requests);
            const keys = [];
            responses.forEach((response) => {
                if (response.Contents) {
                    for (const object of response.Contents) {
                        keys.push(object);
                    }
                }
            });
            return keys;
        } catch (error) {
            console.error('Error retrieving keys:', error);
            return [];
        }
    }
    const prefixes = pipelines_json.remote_workflows
        .map((pipeline) => {
            return pipeline.releases
                .filter((rel) => rel.tag_name !== 'dev')
                .map((release) => {
                    return `${pipeline.name}/results-${release.sha}/`;
                });
        })
        .flat();
    bucketContents = await getKeysWithPrefixes(prefixes);
    pipelines_json.remote_workflows.forEach(async (pipeline) => {
        pipeline.releases
            .filter((rel) => rel.tag_name !== 'dev')
            .forEach(async (release) => {
                const results_path = 'results-' + release.sha;
                const version = release.tag_name;
                paths.push({
                    params: {
                        pipeline: pipeline.name,
                        version: version,
                        results_path: results_path,
                    },
                    props: {
                        content: bucketContents.filter((item) => {
                            return (
                                item.Key.startsWith(`${pipeline.name}/${results_path}/`) &&
                                item.Key.slice(0, -1).split('/').length === 3
                            );
                        }),
                    },
                });
            });
    });
    return paths;
}
const { pipeline, version, results_path } = Astro.params;
const { content } = Astro.props;
if (version === 'dev') {
    return Astro.redirect(`/${pipeline}/`);
}
---

<ResultsLayout {pipeline} {version} path={results_path} bucketContents={content} />
